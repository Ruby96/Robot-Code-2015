#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
#include <FEHServo.h>

//Declarations for encoders & motors
ButtonBoard buttons(FEHIO::Bank3);
DigitalEncoder right_encoder(FEHIO::P2_2);
DigitalEncoder left_encoder(FEHIO::P2_3);
AnalogInputPin sensor(FEHIO::P2_5);
FEHMotor right_motor(FEHMotor::Motor0);
FEHMotor left_motor(FEHMotor::Motor3);
FEHServo crank(FEHServo::Servo0);
FEHServo pulley(FEHServo::Servo7);


void accel_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    int i;
    //Set both motors to desired percent
    for( i=5;i<=percent;i+=5){
    Sleep(25);
    right_motor.SetPercent(0.9*i);
    left_motor.SetPercent(-1.1*i);
    }
    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
    //Turn off motors
    for( i=percent;i>=0;i-=5){
    Sleep(25);
    right_motor.SetPercent(i);
    left_motor.SetPercent(i);
    }

}
void move_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    int i=percent;
    //Set both motors to desired percent

    right_motor.SetPercent(i);
    left_motor.SetPercent(-1*i);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}




void move_backward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-.5*percent);
    left_motor.SetPercent(1.5*percent);
    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void turn_right(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    //hint: set right motor backwards, left motor forwards
    right_motor.SetPercent(-1*(percent));
    left_motor.SetPercent(-1*(percent));


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void turn_left(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);


    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void check_right(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    //hint: set right motor backwards, left motor forwards
    right_motor.SetPercent(-1*(percent*1.2));
    left_motor.SetPercent(-1*(percent*1.0));


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void check_left(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent*1.0);
    left_motor.SetPercent(percent*1.2);


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);


    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void check_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(.9*percent);
    left_motor.SetPercent(-1.1*percent);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void check_backward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-.75*percent);
    left_motor.SetPercent(1.25*percent);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void check_x_plus(float x_coordinate) //using RPS while robot is in the +x direction
{
    //check whether the robot is within an acceptable range
    while(RPS.X() < x_coordinate - 1 || RPS.X() > x_coordinate + 1)
    {
         Sleep(100);
        LCD.WriteLine(RPS.X());
        if(RPS.X() > x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,3);
        }
        else if(RPS.X() < x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,3);
        }
    }
}

void check_x_minus(float x_coordinate) //using RPS while robot is in the +x direction
{
    //check whether the robot is within an acceptable range
    while(RPS.X() < x_coordinate - 1 || RPS.X() > x_coordinate + 1)
    {
         Sleep(100);
        LCD.WriteLine(RPS.X());
        if(RPS.X() > x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,3);
        }
        else if(RPS.X() < x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,3);
        }
    }
}

void check_y_minus(float y_coordinate) //using RPS while robot is in the -y direction
{
    //check whether the robot is within an acceptable range
    while(RPS.Y() < y_coordinate - 1 || RPS.Y() > y_coordinate + 1)

    {
        Sleep(100);

        LCD.WriteLine(RPS.Y());
        if(RPS.Y() > y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,3);
            //<ADD CODE HERE>
        }
        else if(RPS.Y() < y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,3);
            //<ADD CODE HERE>
        }
    }
}

void check_y_plus(float y_coordinate) //using RPS while robot is in the +y direction
{
    //check whether the robot is within an acceptable range
    while(RPS.Y() < y_coordinate - 1 || RPS.Y() > y_coordinate + 1)
    {
         Sleep(100);
        LCD.WriteLine(RPS.Y());
        if(RPS.Y() > y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,3);
            //<ADD CODE HERE>
        }
        else if(RPS.Y() < y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,3);
            //<ADD CODE HERE>
        }
    }
}

void check_heading(float heading) //using RPS
{
    //you will need to fill out this one yourself and take into account
    //the edge conditions (when you want the robot to go to 0 degrees
    //or close to 0 degrees)


    if (heading == 0){

        while(!(RPS.Heading()>=359) && !(RPS.Heading()<=1))
        {
            LCD.WriteLine(RPS.Heading());
        if(RPS.Heading()>180){
           check_left(50, 3);
           Sleep(100);
        }
        else{
            check_right(50, 3);
            Sleep(100);
        }
        }
    }




    else{
    while(RPS.Heading()< heading - 1 || RPS.Heading() > heading + 1)
    {

        LCD.WriteLine(RPS.Heading());



        if (RPS.Heading() < heading)
        {
            check_left(50, 3);
            Sleep(100);
        }
        if (RPS.Heading() > heading)
        {
            check_right(50, 3);
            Sleep(100);
        }
        }
    }
 }

int main(void)
{

   RPS.InitializeMenu();
   pulley.SetMin(775);
   pulley.SetMax(1775);
   z=0;
   while(!buttons.MiddlePressed());
   while(buttons.MiddlePressed());

   int redorder=RPS.RedButtonOrder(), blueorder=RPS.BlueButtonOrder(), whiteorder=RPS.WhiteButtonOrder();
      if(redorder==1)
      {
        pulley.SetDegree(180);//move lift to red button
        Sleep(500);
        right_motor.SetPercent(30);
        left_motor.SetPercent(-30);
        startTime=TimeNow();
        while(z-startTime < 3)
        {
            z=TimeNow();
            if(RPS.RedButtonPressed==1)
            {
                z=200;
            }
            break;
        }
        right_motor.Stop();
        left_motor.Stop();
        move_backward(30,75);
        Sleep(500);
        if(whiteorder==2)
        {
            pulley.SetDegree(115);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;  
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(50,50);
            Sleep(500);

            pulley.SetDegree(70);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);


         }
         else if(blueorder==2)
         {
            pulley.SetDegree(70);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

            pulley.SetDegree(115);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

         }
      }
      else if(whiteorder==1)
      {
        pulley.SetDegree(115);//move lift to red button
        Sleep(500);
        right_motor.SetPercent(30);
        left_motor.SetPercent(-30);
        startTime=TimeNow();
        while(z-startTime < 3)
        {
            z=TimeNow();
            if(RPS.RedButtonPressed==1)
            {
                z=200;
            }
            break;
        }
        }
        right_motor.Stop();
        left_motor.Stop();
        move_backward(30,75);
        Sleep(500);
        if(redorder==2)
        {
            pulley.SetDegree(180);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
               break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

            pulley.SetDegree(70);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);


         }
         else if(blueorder==2)
         {
            pulley.SetDegree(70);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
               break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

            pulley.SetDegree(180);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

         }
      }
      else if(blueorder==1)
      {
        pulley.SetDegree(70);//move lift to red button
        Sleep(500);
        right_motor.SetPercent(30);
        left_motor.SetPercent(-30);
        startTime=TimeNow();
        while(z-startTime < 3)
        {
            z=TimeNow();
            if(RPS.RedButtonPressed==1)
            {
                z=200;
            }
        break;
        }
        right_motor.Stop();
        left_motor.Stop();
        move_backward(30,75);
        Sleep(500);
        if(redorder==2)
        {
            pulley.SetDegree(180);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
            break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

            pulley.SetDegree(115);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);


         }
         else if(whiteorder==2)
         {
            pulley.SetDegree(115);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

            pulley.SetDegree(180);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            z=0;
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);

         }
      }

    




   }
