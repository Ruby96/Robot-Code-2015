#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
#include <FEHServo.h>

//Declarations for encoders & motors
ButtonBoard buttons(FEHIO::Bank3);
DigitalEncoder right_encoder(FEHIO::P2_2);
DigitalEncoder left_encoder(FEHIO::P2_3);
AnalogInputPin sensor(FEHIO::P2_5);
FEHMotor right_motor(FEHMotor::Motor0);
FEHMotor left_motor(FEHMotor::Motor3);
FEHServo crank(FEHServo::Servo0);
FEHServo pulley(FEHServo::Servo7);



void accel_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    int i;
    //Set both motors to desired percent
    for( i=5;i<=percent;i+=5){
    Sleep(25);
    right_motor.SetPercent(0.9*i);
    left_motor.SetPercent(-1.1*i);
    }
    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    for( i=percent;i>=0;i-=5){
    Sleep(25);
    right_motor.SetPercent(i);
    left_motor.SetPercent(i);
    }

}
void move_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    int i=percent;
    //Set both motors to desired percent

    right_motor.SetPercent(i/1.0394);
    left_motor.SetPercent(-1.0394*i);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void move_upramp(int percent) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    float countsPerInch= 33.74084;
    //Set both motors to desired percent
    for(int i=10;i<=percent;i+=10){
    Sleep(30);
    right_motor.SetPercent(i/1.0374);
    left_motor.SetPercent(-1.0374*i);
    }
    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < (12)*countsPerInch );


    //Turn off motors
    for(int i=percent;i>=0;i-=2){
    Sleep(40);
    right_motor.SetPercent(i);
    left_motor.SetPercent(-1*i);
    }
}




void move_backward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-1*percent);
    left_motor.SetPercent(percent);
    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void turn_right(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    //hint: set right motor backwards, left motor forwards
    right_motor.SetPercent(-1*(percent));
    left_motor.SetPercent(-1*(percent));


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void turn_left(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);


    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void check_right(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    //hint: set right motor backwards, left motor forwards
    right_motor.SetPercent(-1*(percent*1));
    left_motor.SetPercent(-1*(percent*1));


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void check_left(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent*1);
    left_motor.SetPercent(percent*1);


    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts()+right_encoder.Counts())/2. < counts);


    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void check_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(-1*percent);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void check_backward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-1*percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void check_x_plus(float x_coordinate) //using RPS while robot is in the +x direction
{
    //check whether the robot is within an acceptable range
    while(RPS.X() < x_coordinate - 1 || RPS.X() > x_coordinate + 1)
    {
         Sleep(50);
        LCD.WriteLine(RPS.X());
        if(RPS.X() > x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,1);
        }
        else if(RPS.X() < x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,1);
        }
    }
}

void check_x_minus(float x_coordinate) //using RPS while robot is in the +x direction
{
    //check whether the robot is within an acceptable range
    while(RPS.X() < x_coordinate - 1 || RPS.X() > x_coordinate + 1)
    {
         Sleep(50);
        LCD.WriteLine(RPS.X());
        if(RPS.X() > x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,1);
        }
        else if(RPS.X() < x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,1);
        }
    }
}

void check_y_minus(float y_coordinate) //using RPS while robot is in the -y direction
{
    //check whether the robot is within an acceptable range
    while(RPS.Y() < y_coordinate - 1 || RPS.Y() > y_coordinate + 1)

    {
        Sleep(100);

        LCD.WriteLine(RPS.Y());
        if(RPS.Y() > y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,1);
            //<ADD CODE HERE>
        }
        else if(RPS.Y() < y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,1);
            //<ADD CODE HERE>
        }
    }
}

void check_y_plus(float y_coordinate) //using RPS while robot is in the +y direction
{
    //check whether the robot is within an acceptable range
    while(RPS.Y() < y_coordinate - 1 || RPS.Y() > y_coordinate + 1)
    {
         Sleep(50);
        LCD.WriteLine(RPS.Y());
        if(RPS.Y() > y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_backward(50,1);
            //<ADD CODE HERE>
        }
        else if(RPS.Y() < y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction
            check_forward(50,1);
            //<ADD CODE HERE>
        }
    }
}

void check_heading(float heading) //using RPS
{
    //you will need to fill out this one yourself and take into account
    //the edge conditions (when you want the robot to go to 0 degrees
    //or close to 0 degrees)


    if (heading == 0){

        while(!(RPS.Heading()>=359) && !(RPS.Heading()<=1))
        {
            LCD.WriteLine(RPS.Heading());
        if(RPS.Heading()>180){
           check_left(100, 1);
           Sleep(50);
        }
        else{
            check_right(100, 1);
            Sleep(50);
        }
        }
    }




    else{
    while(RPS.Heading()< heading - 1 || RPS.Heading() > heading + 1)
    {

        LCD.WriteLine(RPS.Heading());



        if (RPS.Heading() < heading)
        {
            check_left(100, 1);
            Sleep(50);
        }
        if (RPS.Heading() > heading)
        {
            check_right(100, 1);
            Sleep(50);
        }
        }
    }
 }

void rotate_crank(){

    move_backward(30,300);
    check_y_minus(54.3);
    Sleep(250);
    float color = sensor.Value();
    Sleep(250);
    LCD.WriteLine(color);
    if(color<.669)
    {
        LCD.WriteLine("Light is Red");
        crank.SetDegree(0);
        Sleep(1000);
        move_backward(40,60);
        Sleep(500);
        move_forward(30,5);
        Sleep(1000);
        crank.SetDegree(180);
        Sleep(1000);

        move_forward(30,45);
        Sleep(1000);
        crank.SetDegree(0);
        Sleep(1000);
        move_backward(40,60);
        Sleep(500);
        move_forward(30,5);
        Sleep(1000);
        crank.SetDegree(180);        
        Sleep(1000);

        move_forward(30,45);
        Sleep(1000);
        crank.SetDegree(0);
        Sleep(1000);
        move_backward(40,60);
        Sleep(500);
        move_forward(30,5);
        Sleep(1000);
        crank.SetDegree(160);
        Sleep(1000);
    }
    else
    {
        LCD.WriteLine("Light is Blue");
        crank.SetDegree(180);
        Sleep(1000);
        move_backward(40,60);
        Sleep(500);
        move_forward(30,5);
        Sleep(1000);
        crank.SetDegree(0);
        Sleep(1000);

        move_forward(30,45);
        Sleep(1000);
        crank.SetDegree(180);
        Sleep(1000);
        move_backward(40,60);
        Sleep(500);
        move_forward(30,5);
        Sleep(1000);
        crank.SetDegree(0);
        Sleep(1000);

        move_forward(30,45);
        Sleep(1000);
        crank.SetDegree(180);
        Sleep(1000);
        move_backward(40,60);
        Sleep(500);
        move_forward(30,5);
        Sleep(1000);
        crank.SetDegree(20);
        Sleep(1000);
    }


}

void push_buttons()
{
    int redorder=RPS.RedButtonOrder(), blueorder=RPS.BlueButtonOrder(), whiteorder=RPS.WhiteButtonOrder();
    double startTime;
    int z;
          if(redorder==1)
          {
            pulley.SetDegree(180);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed()==1)
                {
                    z=200;
                }
                break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);
            if(whiteorder==2)
            {
                pulley.SetDegree(115);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(50,50);
                Sleep(500);

                pulley.SetDegree(70);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);


             }
             else if(blueorder==2)
             {
                pulley.SetDegree(70);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

                pulley.SetDegree(115);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

             }
          }
          else if(whiteorder==1)
          {
            pulley.SetDegree(115);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed()==1)
                {
                    z=200;
                }
                break;
            }
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);
            if(redorder==2)
            {
                pulley.SetDegree(180);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                   break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

                pulley.SetDegree(70);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);


             }
             else if(blueorder==2)
             {
                pulley.SetDegree(70);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                   break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

                pulley.SetDegree(180);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

             }

          else if(blueorder==1)
          {
            pulley.SetDegree(70);//move lift to red button
            Sleep(500);
            right_motor.SetPercent(30);
            left_motor.SetPercent(-30);
            startTime=TimeNow();
            while(z-startTime < 3)
            {
                z=TimeNow();
                if(RPS.RedButtonPressed()==1)
                {
                    z=200;
                }
            break;
            }
            right_motor.Stop();
            left_motor.Stop();
            move_backward(30,75);
            Sleep(500);
            if(redorder==2)
            {
                pulley.SetDegree(180);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

                pulley.SetDegree(115);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);


             }
             else if(whiteorder==2)
             {
                pulley.SetDegree(115);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

                pulley.SetDegree(180);//move lift to red button
                Sleep(500);
                right_motor.SetPercent(30);
                left_motor.SetPercent(-30);
                z=0;
                startTime=TimeNow();
                while(z-startTime < 3)
                {
                    z=TimeNow();
                    if(RPS.RedButtonPressed()==1)
                    {
                        z=200;
                    }
                    break;
                }
                right_motor.Stop();
                left_motor.Stop();
                move_backward(30,75);
                Sleep(500);

             }
          }
}

int main(void)
{

    //Initialize the screen (GO BUCKS!)
    LCD.Clear( FEHLCD::Black );
    LCD.SetFontColor( FEHLCD::Green );
   RPS.InitializeMenu();
    crank.SetMin(687);
    crank.SetMax(2311);
    crank.SetDegree(90);
    pulley.SetMin(775);
    pulley.SetMax(1776);
    pulley.SetDegree(10);
    int countsPerInch=33.7;    
    while(!buttons.MiddlePressed());
    while(buttons.MiddlePressed());
    double startTime= TimeNow();
    LCD.WriteLine("Waiting for light");
    while(sensor.Value() > 0.5 && TimeNow()-startTime< 30);

    Sleep(100);
    move_forward(50, 725);
    check_heading(180);
    Sleep(250);
    check_y_minus(3.3);
    Sleep(250);


    turn_left(50,100);
    Sleep(250);
    check_heading(250);
    Sleep(250);

    move_forward(75,(17)*countsPerInch);
    Sleep(750);
    pulley.SetDegree(180);
    Sleep(250);

    Sleep(250);
    move_backward(30, (6)*countsPerInch);
    Sleep(250);
    pulley.SetDegree(90);

    turn_left(40, 100);
    Sleep(250);
    check_heading(315);
    Sleep(250);

    move_forward(40,(14)*countsPerInch);
    Sleep(250);
    //CHECK_MAYBE?

    turn_left(40, 50);
    Sleep(250);
    check_heading(0);
    Sleep(1000);


    move_upramp(70);
    check_heading(0);



    check_y_plus(55.5);

    turn_left(50,350);
    check_heading(140);

    move_backward(30,150);
    check_x_minus(29.8);

    turn_left(20,100);
    check_heading(180);
    crank.SetDegree(0);
    move_forward(50, 150);

    check_heading(180);
    rotate_crank();





    move_forward(50,150);
    check_y_minus(47.8);
    Sleep(250);

    turn_right(50,150);
    Sleep(250);
    check_heading(90);
    Sleep(250);

    move_forward(50,(14)*countsPerInch);
    Sleep(250);
    check_x_minus(7.9);
    Sleep(250);

    turn_right(50,100);
    Sleep(250);
    check_heading(50);
    Sleep(250);

    move_forward(100,(6)*countsPerInch);
    Sleep(250);
    move_backward(50,(8)*countsPerInch);
    Sleep(250);

  turn_right(50,200);
  check_heading(320);

  move_forward(30,(7)*countsPerInch);
  turn_left(50,150);
  check_heading(50);
  push_buttons();

 /* move_backward(30,(8)*countsPerInch);
pulley.SetDegree(180);

turn_left(50,200);
Sleep(250);
check_heading(90);
Sleep(250);

move_forward(50,(2)*countsPerInch);
Sleep(250);
check_x_minus(3.7);
Sleep(250);

turn_left(50,430);
Sleep(250);
check_heading(180);
Sleep(250);

move_forward(50,(35)*countsPerInch);
Sleep(250);
check_y_minus(21);
Sleep(250);

turn_left(50,30);
Sleep(250);
crank.SetDegree(25);
check_heading(200);
Sleep(250);

move_forward(50,(10)*countsPerInch);
Sleep(250);
//check_y_minus(18);
Sleep(250);*/
}
